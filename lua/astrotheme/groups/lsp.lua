local function callback()
  return {
    DiagnosticError = { fg = C.dark_red },
    DiagnosticHint = { fg = C.dark_yellow },
    DiagnosticInfo = { fg = C.overlay0 },
    DiagnosticWarn = { fg = C.dark_orange },
    DiagnosticInformation = { fg = C.yellow, bold = true },
    DiagnosticTruncateLine = { fg = C.overlay0, bold = true },
    DiagnosticUnderlineError = { sp = C.red, undercurl = true },
    DiagnosticUnderlineHint = { sp = C.red, undercurl = true },
    DiagnosticUnderlineInfo = { sp = C.red, undercurl = true },
    DiagnosticUnderlineWarn = { sp = C.red, undercurl = true },
    LspCodeLens = { fg = C.subtext1 },
    LspCodeLensSeparator = { fg = C.subtext1 },
    LspDiagnosticsFloatingError = { fg = C.dark_red },
    LspDiagnosticsFloatingHint = { fg = C.dark_yellow },
    LspDiagnosticsFloatingInfor = { fg = C.overlay0 },
    LspDiagnosticsFloatingWarn = { fg = C.dark_orange },
    LspFloatWinBorder = { fg = C.overlay0 },
    LspFloatWinNormal = { fg = C.text, bg = C.crust },
    LspReferenceRead = { fg = C.none, bg = C.surface1 },
    LspReferenceText = { fg = C.none, bg = C.surface1 },
    LspReferenceWrite = { fg = C.none, bg = C.surface1 },
    ProviderTruncateLine = { fg = C.overlay0 },
    ["@lsp.type.enum"] = { link = "@type" },
    ["@lsp.type.keyword"] = { link = "@keyword" },
    ["@lsp.type.interface"] = { link = "@interface" },
    ["@lsp.type.method"] = { link = "@function" },
    ["@lsp.type.namespace"] = { link = "@namespace" },
    ["@lsp.type.parameter"] = { link = "@parameter" },
    ["@lsp.type.property"] = { link = "@property" },
    ["@lsp.type.class"] = { link = "@namespace" },
    ["@lsp.type.decorator"] = { link = "@method" },
    ["@lsp.type.enumMember"] = { link = "@constant" },
    ["@lsp.type.function"] = { link = "@function" },
    ["@lsp.type.macro"] = { link = "@function.macro" },
    ["@lsp.type.type"] = { link = "@type" },
    ["@lsp.type.typeParameter"] = { link = "@parameter" },
    ["@lsp.type.variable"] = {}, -- use treesitter styles for regular variables
    ["@lsp.typemod.method.defaultLibrary"] = { link = "@function.builtin" },
    ["@lsp.typemod.function.defaultLibrary"] = { link = "@function.builtin" },
    ["@lsp.typemod.variable.defaultLibrary"] = { link = "@variable.builtin" },
  }
end

return callback
